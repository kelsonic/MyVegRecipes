Things You'll Need:

1. Migration to create reviews table, body, type = text_field, two foreign keys, reference chef_id, reference recipe_id
2. You'll need to build the review model
3. You'll need to create tests for the spec, add validations to the review model
4. Build the associations, has_many and belongs_to between recipes and reviews as well as between chefs and reviews
5. Test out associations using TTD or in rails console
    - recipe.reviews
    - chef.reviews
6. Routes
    - new, create, edit, show, destroy
7. Authenticated chefs can create reviews, before_action require_user
8. Associate a chef_id and recipe_id
9. Use existing code if possible
10. Pagination for comments

Read up on authentication using HasSecurePassword (what Rails provides by default). Why not use devise? If we build it from scratch, we know how to modify it.

When you start using gems, you may not be able to modify it and since it is fairly easy to put together a secure system, we'll create our own.

Read more at http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html



* My Veg Recipes primary colors:

    light orange = #ed6542
    forest green = #41b866
    light grey = #f1efea    // background-color
    white = #fff            
    
    secondary colors:
    
    blue = #287fb8

* My Veg Recipes font color:

    dark grey = #27374c     
    
* My Veg Recipes line colors:

    bottom-border: 1px solid #bfcad2    // light grey